digraph ClientServer {
    rankdir=TB;
    compound=true;
    node [shape=box, fontname="Arial"];

    subgraph cluster_client {
        label = "Client Process";
        labelloc=t;
        fontsize=16;
        
        client_start [label="Start Client"];
        client_parse [label="Parse Arguments\n(-ip, -p, -f, -key)"];
        client_validate [label="Validate Inputs\n(IP, Port, File, Keyword)"];
        client_open [label="Open File"];
        client_read [label="Read File Content"];
        client_socket [label="Create Socket"];
        client_connect [label="Connect to Server"];
        client_send_key [label="Send Keyword + '\\n'"];
        client_send_data [label="Send File Contents"];
        client_shutdown [label="Shutdown Write"];
        client_receive [label="Receive Encrypted Data"];
        client_close [label="Close Connection"];
        client_end [label="Exit"];

        client_start -> client_parse -> client_validate -> client_open -> client_read
        client_read -> client_socket -> client_connect -> client_send_key
        client_send_key -> client_send_data -> client_shutdown -> client_receive
        client_receive -> client_close -> client_end;
    }

    subgraph cluster_server {
        label = "Server Process";
        labelloc=t;
        fontsize=16;
        
        server_start [label="Start Server"];
        server_parse [label="Parse Arguments\n(-ip, -p)"];
        server_validate [label="Validate IP/Port"];
        server_socket [label="Create Socket"];
        server_config [label="Configure Socket\n(Bind, Listen)"];
        server_accept [label="Accept Connection"];
        server_recv_key [label="Receive Keyword"];
        server_recv_msg [label="Receive Message"];
        server_encrypt [label="Apply VigenÃ¨re Cipher"];
        server_send [label="Send Encrypted Data"];
        server_close [label="Close Client Socket"];
        server_loop [label="Wait for New Client", shape=diamond];

        server_start -> server_parse -> server_validate -> server_socket -> server_config
        server_config -> server_accept -> server_recv_key -> server_recv_msg
        server_recv_msg -> server_encrypt -> server_send -> server_close -> server_loop
        server_loop -> server_accept [label="New Connection"];
    }

    // Cross-process interactions
    client_connect -> server_accept [ltail=cluster_client, lhead=cluster_server, label="TCP Connection", dir=both];
    client_send_key -> server_recv_key [label="Keyword\\n", fontsize=10];
    client_send_data -> server_recv_msg [label="File Data", fontsize=10];
    server_send -> client_receive [label="Encrypted Data"];
}
